@model (List<Schedule> Schedules, List<Leave> Leaves, int Month, int Year)

@{
    var year = Model.Year;
    var month = Model.Month;
    var leaves = Model.Leaves;
    var userSchedules = Model.Schedules;

    var holidays = ViewBag.Holidays as List<Holiday> ?? new List<Holiday>();
    var shifts = ViewBag.Shifts as List<Shift> ?? new List<Shift>();
    var leaveTypes = ViewBag.LeaveTypes as List<Leave_type> ?? new List<Leave_type>();

    var firstDay = new DateTime(year, month, 1);
    var daysInMonth = DateTime.DaysInMonth(year, month);
    var startDayOfWeek = (int)firstDay.DayOfWeek;
    var weeks = (int)Math.Ceiling((startDayOfWeek + daysInMonth) / 7.0);
    var today = DateTime.Today;

    var prevMonth = firstDay.AddMonths(-1);
    var prevMonthDays = DateTime.DaysInMonth(prevMonth.Year, prevMonth.Month);
    var nextMonth = firstDay.AddMonths(1);
}

<div class="row">
    <div class="col mb-3">
        <div class="card p-3">
            <!-- Month Header Navigation -->
            <div class="row justify-content-between mb-3">
                @if (_template.HasPermission("MonthNav"))
                {
                    <div class="col-auto">
                        <a class="btn btn-light border" id="prevBtn"><i class="bi bi-arrow-bar-left"></i> @prevMonth.ToString("MMM")</a>
                    </div>
                }
                <div class="col text-center">
                    <span class="fs-3 fw-semibold">@firstDay.ToString("MMMM yyyy")</span>
                </div>
                @if (_template.HasPermission("MonthNav"))
                {
                    <div class="col-auto">
                        <a class="btn btn-light border" id="nextBtn">@nextMonth.ToString("MMM") <i class="bi bi-arrow-bar-right"></i></a>
                    </div>
                }
            </div>
            <div class="table-responsive">
                <table class="table table-bordered border-secondary-subtle text-center" id="calendar" style="table-layout:fixed;">
                    <thead>
                        <tr class="text-nowrap">
                            <th class="bg-light-subtle" style="width:80px;">Sun</th>
                            <th class="bg-light-subtle" style="width:80px;">Mon</th>
                            <th class="bg-light-subtle" style="width:80px;">Tue</th>
                            <th class="bg-light-subtle" style="width:80px;">Wed</th>
                            <th class="bg-light-subtle" style="width:80px;">Thu</th>
                            <th class="bg-light-subtle" style="width:80px;">Fri</th>
                            <th class="bg-light-subtle" style="width:80px;">Sat</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int week = 0; week < weeks; week++)
                        {
                            <tr>
                                @for (int day = 0; day < 7; day++)
                                {
                                    int cellDay = week * 7 + day - startDayOfWeek + 1;

                                    if (cellDay < 1)
                                    {
                                        var prevDate = new DateTime(prevMonth.Year, prevMonth.Month, prevMonthDays + cellDay);
                                        <td class="text-muted bg-light-subtle" style="height:100px;">
                                            <p class="text-start">@prevDate.Day</p>
                                        </td>
                                    }
                                    else if (cellDay > daysInMonth)
                                    {
                                        var nextDate = new DateTime(year, month, 1).AddMonths(1).AddDays(cellDay - daysInMonth - 1);
                                        <td class="text-muted bg-light-subtle" style="height:100px;">
                                            <p class="text-start">@nextDate.Day</p>
                                        </td>
                                    }
                                    else
                                    {
                                        var date = new DateTime(year, month, cellDay);
                                        var dateString = date.ToString("yyyy-MM-dd");
                                        bool isWeekend = date.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;
                                        var isCurrentDay = today.Date == date.Date;

                                        var schedule = userSchedules.FirstOrDefault(s => s.Date == date);
                                        int shiftId = schedule?.Shift_ID ?? 0;

                                        var leave = leaves.FirstOrDefault(l => date >= l.Date_start && date <= l.Date_end);
                                        bool hasLeave = leave != null;
                                        string leaveTypeName = hasLeave
                                            ? leaveTypes.FirstOrDefault(l => l.Leave_type_ID == leave?.Leave_type_ID)?.Leave_type_name ?? string.Empty
                                            : string.Empty;
                                        string leavePopover = string.Empty;

                                        var holiday = holidays.FirstOrDefault(h => h.Date == date);
                                        bool isHoliday = holiday != null;
                                        bool isCompanyHoliday = holiday?.Type == "Company";

                                        // Styling
                                        string cellClass = isCurrentDay ? "fw-bold" : string.Empty;

                                        cellClass = isHoliday
                                        ? (isCompanyHoliday ? "bg-secondary text-white bg-gradient" : "bg-secondary-subtle text-secondary-emphasis")
                                        : (isWeekend ? "bg-secondary-subtle text-secondary-emphasis" : cellClass);

                                        string bgClass = string.Empty;
                                        string borderColor = string.Empty;
                                        string borderClass = string.Empty;

                                        // Leave coloring and borders
                                        if (hasLeave && leave?.Status == "Approved" && shiftId != 0)
                                        {
                                            leavePopover = $"data-bs-toggle='popover' data-bs-placement='top' data-bs-trigger='focus hover' data-bs-html='true' data-bs-content='<strong>{(leave?.Day_type != "FullDay" ? "Half day " : "")}{leaveTypeName}</strong>' tabindex='0'";
                                            bgClass = $"bg-{leave?.Leave_type?.BsColor} bg-gradient {leave?.Day_type}";
                                        }

                                        if (hasLeave)
                                        {
                                            if (leave?.Approver_1 == null)
                                            {
                                                leavePopover = $"data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-trigger=\"focus hover\" data-bs-title=\"Request for {(leave?.Day_type != "FullDay" ? "Half day " : "")}{leaveTypeName}\" data-bs-content=\"No approvals yet\" tabindex=\"0\"";
                                                bgClass = "bg-warning bg-opacity-25";
                                                borderColor = "border-warning";
                                            }
                                            else if (leave?.Approver_2 == null)
                                            {
                                                string contentHtml = $"<i class='bi bi-check-circle me-1 text-success'></i>Approved: {leave?.Approver1?.Full_name ?? ""}</br><span class='text-secondary fw-italic'>- Needs final approval from HR</span>";
                                                string encodedContent = System.Net.WebUtility.HtmlEncode(contentHtml); // optional if you use data-bs-html="true"
                                                leavePopover = $"data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-trigger=\"focus hover\" data-bs-html=\"true\" data-bs-title=\"Request for {(leave?.Day_type != "FullDay" ? "Half day " : "")}{leaveTypeName}\" data-bs-content=\"{contentHtml}\" tabindex=\"0\"";
                                                bgClass = "bg-success bg-opacity-25";
                                                borderColor = "border-success";
                                            }

                                            if (!string.IsNullOrEmpty(borderColor))
                                            {
                                                if (date == leave?.Date_start && date == leave?.Date_end)
                                                    borderClass = $"border border-2 rounded";
                                                else if (date == leave?.Date_start)
                                                    borderClass = $"border border-2 border-end-0 rounded-start";
                                                else if (date == leave?.Date_end)
                                                    borderClass = $"border border-2 border-start-0 rounded-end";
                                                else if (date > leave?.Date_start && date < leave?.Date_end)
                                                    borderClass = $"border border-2 border-start-0 border-end-0";

                                                borderClass += $" {borderColor}";
                                            }
                                        }

                                        <td class="p-1 pt-4 @cellClass position-relative" style="height:100px;" @Html.Raw(leavePopover)>
                                            @if (isCompanyHoliday)
                                            {
                                                <p class="text-break mt-2" style="display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">@holiday?.Name</p>
                                            } else 
                                            {
                                                if (schedule?.Shift_ID == null && (schedule?.Time_in != null || schedule?.Time_out != null))
                                                {
                                                    <p class="mt-2 @(isCurrentDay ? "fs-2" : "fs-3")">@schedule?.Time_in?.ToString(@"hh\:mm") - @schedule?.Time_out?.ToString(@"hh\:mm")</p>
                                                } else
                                                {
                                                    <p class="mb-0 position-absolute top-50 start-50 translate-middle @(isCurrentDay ? "fs-2" : "fs-3") @(hasLeave && (leave?.Day_type != "FullDay") ? "z-2" : "z-1")">@(schedule?.Shift?.Acronym ?? schedule?.Shift?.Shift_name)</p>
                                                }
                                            }
                                            <p class="position-absolute start-0 top-0 w-100 h-100 text-start p-2 mb-0 @borderClass @(hasLeave ? bgClass : "")
                                                @(hasLeave && (leave?.Day_type != "FullDay") && leave?.Status == "Approved" ? "z-1" : "z-2")">
                                                <span class="@(isCurrentDay ? "bg-primary text-white rounded-circle d-inline-flex align-items-center justify-content-center fw-bold" : "")" style="width: 1.5rem; height: 1.5rem;">
                                                    @cellDay
                                                </span>
                                            </p>

                                            @if (schedule?.Comment == "cancelled")
                                            {
                                                <svg class="position-absolute top-0 start-0 w-100 h-100">
                                                    <line x1="0" y1="0" x2="100%" y2="100%" stroke="red" stroke-width="1" />
                                                    <line x1="100%" y1="0" x2="0" y2="100%" stroke="red" stroke-width="1" />
                                                </svg>
                                            }
                                        </td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-12 col-xxl-3" id="legendsAndShifts" style="display:none;">
        @* Leave Legends *@
        <div class="card p-3 mb-3">
            <small class="text-body-secondary mb-2">Leave applications</small>
            <p class="mb-2"><small class="bg-warning-subtle border border-2 border-warning rounded-1 font-monospace">&nbsp;&nbsp;&nbsp;</small>&nbsp;&nbsp;Pending</p>
            <p class="mb-3"><small class="bg-success-subtle border border-2 border-success rounded-1 font-monospace">&nbsp;&nbsp;&nbsp;</small>&nbsp;&nbsp;Approved by manager</p>
            <small class="text-body-secondary mb-2">Reflected leaves</small>
            @foreach (var leaveType in leaveTypes)
            {
                <p class="mb-2"><span class="bg-@leaveType?.BsColor rounded-1 font-monospace">&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;@leaveType?.Leave_type_name</p>
            }
            <p class="mb-2"><span class="bg-secondary rounded-1 font-monospace">&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;Company holiday</p>
        </div>

        @* Shift Patterns *@
        @foreach (var pattern in new[] { "4/2", "5/2" })
        {
            var shiftPattern = shifts.Where(s => s.Pattern == pattern).ToList();
            if (shiftPattern.Any())
            {
                <div class="card py-2 px-4 mb-3">
                    <table class="table table-sm text-center">
                        <thead>
                            <tr><th colspan="2">@pattern pattern</th></tr>
                            <tr><th>Shift</th><th>Time</th></tr>
                        </thead>
                        <tbody>
                            @foreach (var shift in shiftPattern)
                            {
                                <tr>
                                    <td>@shift.Shift_name @(!string.IsNullOrEmpty(shift.Acronym) ? $"({shift.Acronym})" : "")</td>
                                    <td>@($"{shift?.Time_start?.ToString(@"hh\:mm")} - {shift?.Time_end?.ToString(@"hh\:mm")}")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
    </div>
</div>