@using System.Globalization;
@model (List<User> Users, List<Shift> Shifts, List<Schedule> Schedules, List<Leave> Leaves, List<Holiday> Holidays, int month, int year)

@{
    var currentYear = Model.year;
    var selectedMonth = Model.month;
    var daysInMonth = DateTime.DaysInMonth(currentYear, selectedMonth);
    var schedules = Model.Schedules;
    var holidays = Model.Holidays;
    var leaves = Model.Leaves;
    var users = Model.Users;
    var companyHolidayDates = holidays.Where(h => h.Type == "Company").Select(h => h.Date).ToHashSet();
    var userIds = users.Select(u => u.Personnel_ID).ToHashSet();

    // Auth roles
    bool isRegularUser = User.IsInRole("member") || User.IsInRole("shiftLeader");
    bool isManager = User.IsInRole("manager");
    bool isTopManager = User.IsInRole("topManager");
    bool isAdmin = User.IsInRole("admin");
    int userId = int.Parse(User.FindFirst("Personnelid")?.Value);
}

<div class="row">
    <div class="col mb-3">
        <div class="card p-3">

            <!-- Spinner -->
            <div id="loading-spinner" class="position-absolute top-50 start-50 z-3 d-none">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>

            <!-- Month Header Navigation -->
            <div class="row justify-content-between mb-3">
                <div class="col-auto">
                    <a class="btn btn-light border" id="prevBtn"><i class="bi bi-arrow-bar-left"></i> Previous</a>
                </div>
                <div class="col text-center">
                    <h3>@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(selectedMonth)</h3>
                </div>
                <div class="col-auto">
                    <a class="btn btn-light border" id="nextBtn">Next <i class="bi bi-arrow-bar-right"></i></a>
                </div>
            </div>

            <!-- Schedule Table -->
            <div class="table-responsive" style="max-height: calc(100vh - 325px);" id="printableTable">
                <table id="schedule" class="table table-sm table-borderless table-hover m-0" style="border-collapse: separate; border-spacing: 0;">

                    <!-- Table Header -->
                    <thead class="text-center sticky-top z-2">
                        <tr>
                            <th class="border border-secondary align-content-center">Name</th>
                            @for (int day = 1; day <= daysInMonth; day++)
                            {
                                var date = new DateTime(currentYear, selectedMonth, day);
                                var isWeekend = date.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;
                                var holiday = holidays.FirstOrDefault(h => h.Date == date);

                                var holidayClass = date.Date == DateTime.Today
                                ? "bg-primary text-white"
                                : holiday != null
                                    ? (holiday.Type == "Company" ? "bg-secondary text-white" : "bg-secondary-subtle text-secondary-emphasis")
                                    : (isWeekend ? "bg-secondary-subtle text-secondary-emphasis" : "");

                                var holidayPopover = holiday != null
                                ? $"data-bs-toggle='popover' data-bs-placement='top' data-bs-trigger='focus hover' data-bs-content='{holiday.Name}' tabindex='0'"
                                : "";

                                <th class="border border-start-0 border-secondary p-1 @holidayClass" @Html.Raw(holidayPopover)>
                                    <p class="m-0">@day</p>
                                    <small class="fw-light font-monospace">@date.ToString("ddd")</small>
                                </th>
                            }
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var sector in Model.Users.GroupBy(u => u.Sector_ID))
                        {
                            <tbody class="sector">
                                <tr class="sectorName">
                                    <th class="border-bottom border-secondary pb-1" colspan="@(daysInMonth + 1)">@sector?.FirstOrDefault()?.Sector?.Sector_name</th>
                                </tr>
                                @foreach (var user in sector)
                                {
                                    <tr id="user-@user.Personnel_ID" data-sector-id="@user.Sector_ID" class="@(!isRegularUser ? "draggable" : "")">
                                        <td class="border border-top-0 border-secondary text-nowrap text-start ps-2 drag-handle align-content-center @(userId == user.Personnel_ID ? "fw-semibold" : "")">
                                            @user.Full_name
                                        </td>
                                        @for (int day = 1; day <= daysInMonth; day++)
                                        {
                                            var date = new DateTime(currentYear, selectedMonth, day);
                                            var dateString = date.ToString("yyyy-MM-dd");
                                            bool isWeekend = date.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday;

                                            var schedule = schedules.FirstOrDefault(s => s.Personnel_ID == user.Personnel_ID && s.Date == date);
                                            int shiftId = schedule?.Shift_ID ?? 0;

                                            var leave = leaves.FirstOrDefault(l => l.Personnel_ID == user.Personnel_ID && date >= l.Date_start && date <= l.Date_end);
                                            bool hasLeave = leave != null;
                                            string leavePopover = string.Empty;

                                            var holiday = holidays.FirstOrDefault(h => h.Date == date);
                                            bool isHoliday = holiday != null;
                                            bool isCompanyHoliday = holiday?.Type == "Company";

                                            bool canActOnLeave = hasLeave && (isAdmin || isManager || isTopManager || (isRegularUser && leave?.Personnel_ID == userId));

                                            // Styling
                                            string cellClass = isHoliday
                                            ? (isCompanyHoliday ? "bg-secondary text-white" : "bg-secondary-subtle text-secondary-emphasis")
                                            : (isWeekend ? "bg-secondary-subtle text-secondary-emphasis" : "");

                                            string bgClass = string.Empty;
                                            string borderColor = string.Empty;
                                            string borderClass = string.Empty;
                                            string action = string.Empty;

                                            // Leave coloring and borders
                                            if (leave?.Status == "Approved" && leave.Leave_type?.BsColor is not null)
                                            {
                                                leavePopover = $"data-bs-toggle='popover' data-bs-placement='top' data-bs-trigger='focus hover' data-bs-html='true' data-bs-content='<strong>{leave?.Leave_type?.Leave_type_name}</strong>' tabindex='0'";
                                                bgClass = $"bg-{leave?.Leave_type?.BsColor} bg-gradient";
                                            }

                                            if (hasLeave && canActOnLeave)
                                            {
                                                if (leave?.Approver_1 == null)
                                                {
                                                    leavePopover = $"data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-trigger=\"focus hover\" data-bs-title=\"Request for {leave?.Leave_type?.Leave_type_name}\" data-bs-content=\"No approvals yet\" tabindex=\"0\"";
                                                    bgClass = "bg-warning bg-opacity-25";
                                                    borderColor = "border-warning";
                                                }
                                                else if (leave?.Approver_2 == null)
                                                {
                                                    string contentHtml = "<i class='bi bi-check-circle me-1 text-success'></i> Approved by " + (leave?.Approver1?.Full_name ?? "");
                                                    string encodedContent = System.Net.WebUtility.HtmlEncode(contentHtml); // optional if you use data-bs-html="true"
                                                    leavePopover = $"data-bs-toggle=\"popover\" data-bs-placement=\"top\" data-bs-trigger=\"focus hover\" data-bs-html=\"true\" data-bs-title=\"Request for {leave?.Leave_type?.Leave_type_name}\" data-bs-content=\"{contentHtml}\" tabindex=\"0\"";
                                                    bgClass = "bg-success bg-opacity-25";
                                                    borderColor = "border-success";
                                                }

                                                if (!string.IsNullOrEmpty(borderColor))
                                                {
                                                    if (date == leave?.Date_start && date == leave?.Date_end)
                                                        borderClass = $"border border-2 rounded";
                                                    else if (date == leave?.Date_start)
                                                        borderClass = $"border border-2 border-end-0 rounded-start";
                                                    else if (date == leave?.Date_end)
                                                        borderClass = $"border border-2 border-start-0 rounded-end";
                                                    else if (date > leave?.Date_start && date < leave?.Date_end)
                                                        borderClass = $"border border-2 border-start-0 border-end-0";

                                                    borderClass += $" {borderColor}";
                                                }

                                                // Leave actions
                                                if (isManager && leave?.Approver_1 == null)
                                                    action = $"onclick=getLeave({leave?.Leave_ID})";
                                                else if (isTopManager && leave?.Approver_1 != null && leave?.Approver_2 == null)
                                                    action = $"onclick=getLeave({leave?.Leave_ID})";
                                            }

                                            // Disable selector for holidays, leaves, or regular users
                                            string disabledSelect = (isCompanyHoliday || hasLeave || isRegularUser) ? "disabled" : "";

                                            <td id="cell-@user.Personnel_ID-@dateString"
                                            class="p-1 @cellClass position-relative border-bottom border-end border-secondary">

                                                <select data-date="@dateString"
                                                class="form-control p-1 position-relative text-center"
                                                onchange="assignShift(@user.Personnel_ID, '@dateString', this)"
                                                style="background-color: transparent; border: none; z-index: 1;@(isCompanyHoliday ? "color: transparent;" : "")"
                                                @(disabledSelect)>
                                                    <option value="0"></option>
                                                    @foreach (var shift in Model.Shifts)
                                                    {
                                                        if (shift.Shift_ID == shiftId)
                                                        {
                                                            <option class="text-body" value="@shift.Shift_ID" selected>@shift.Shift_name</option>
                                                        }
                                                        else
                                                        {
                                                            <option class="text-body" value="@shift.Shift_ID">@shift.Shift_name</option>
                                                        }
                                                    }

                                                    @if (schedule?.Shift_ID != null)
                                                    {
                                                        @if (schedule?.Comment == "cancelled")
                                                        {
                                                            <option value="998">*Uncancel shift</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="999">*Cancel shift</option>
                                                        }
                                                    }
                                                </select>

                                                <p id="p-@user.Personnel_ID-@dateString"
                                                    class="position-absolute start-0 top-0 w-100 h-100 text-center @borderClass @(hasLeave ? bgClass : "") @(disabledSelect != "disabled" ? "visually-hidden" : "")"
                                                    @Html.Raw(action) @Html.Raw(leavePopover)
                                                    style="z-index: 1;@(action != string.Empty ? "cursor: pointer;" : "")">
                                                </p>
                                                @if (schedule?.Comment == "cancelled")
                                                {
                                                    <svg class="position-absolute top-0 start-0 w-100 h-100">
                                                        <line x1="0" y1="0" x2="100%" y2="100%" stroke="red" stroke-width="1" />
                                                        <line x1="100%" y1="0" x2="0" y2="100%" stroke="red" stroke-width="1" />
                                                    </svg>
                                                }
                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        }
                    </tbody>

                    <!-- Footer Totals -->
                    <tfoot class="sticky-bottom z-2">
                        @foreach (var shift in Model.Shifts.Where(s => new[] { "A", "B", "C" }.Contains(s.Shift_name)))
                        {
                            <tr>
                                <td class="border-end border-secondary fw-semibold text-end">Shift @shift.Shift_name</td>
                                @for (int day = 1; day <= daysInMonth; day++)
                                {
                                    var date = new DateTime(currentYear, selectedMonth, day);
                                    var count = Model.Schedules.Count(s =>
                                    s.Shift_ID == shift.Shift_ID &&
                                    s.Comment != "cancelled" &&
                                    s.Date == date &&
                                    Model.Users.Any(u => u.Personnel_ID == s.Personnel_ID) &&
                                    !Model.Holidays.Any(h => h.Type == "Company" && h.Date == date));

                                    var bgColor = count switch
                                    {
                                        0 => "bg-danger-subtle text-danger-emphasis",
                                        1 => "bg-warning-subtle text-warning-emphasis",
                                        2 => "bg-success-subtle text-success-emphasis",
                                        _ => "bg-success text-white"
                                    };

                                    <td class="border-bottom border-end border-secondary text-center @bgColor"
                                        id="shift-@shift.Shift_name-@date:yyyy-MM-dd">
                                        @count
                                    </td>
                                }
                            </tr>
                        }
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
    <div class="col-12 col-xxl-2" id="legendsAndShifts" style="display:none;">
        @* Leave Legends *@
        <div class="row mb-3">
            <div class="col col-md-6 col-xl-4 col-xxl-12 mb-3">
                <div class="card p-4">
                    <small class="text-body-secondary mb-2">Leave applications</small>
                    <p class="mb-2"><small class="bg-warning-subtle border border-2 border-warning rounded-1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</small>&nbsp;&nbsp;Pending</p>
                    <p class="mb-3"><small class="bg-success-subtle border border-2 border-success rounded-1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</small>&nbsp;&nbsp;Approved by manager</p>
                    <small class="text-body-secondary mb-2">Reflected leaves</small>
                    <p class="mb-2"><span class="bg-warning rounded-1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;Business trip</p>
                    <p class="mb-2"><span class="bg-info rounded-1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;Paid leave</p>
                    <p class="mb-2"><span class="bg-info-subtle rounded-1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;Unpaid leave</p>
                    <p class="mb-2"><span class="bg-secondary rounded-1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;Company holiday</p>
                </div>
            </div>

            @* Shift Patterns *@
            @foreach (var pattern in new[] { "4/2", "5/2" })
            {
                var shifts = Model.Shifts.Where(s => s.Pattern == pattern).ToList();
                if (shifts.Any())
                {
                    <div class="card py-2 px-4 mb-3">
                        <table class="table table-sm text-center">
                            <thead>
                                <tr><th colspan="2">@pattern pattern</th></tr>
                                <tr><th>Shift</th><th>Time</th></tr>
                            </thead>
                            <tbody>
                                @foreach (var shift in shifts)
                                {
                                    <tr><td>@shift.Shift_name</td><td>@shift.Time_start - @shift.Time_end</td></tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            }
        </div>
    </div>
</div>
