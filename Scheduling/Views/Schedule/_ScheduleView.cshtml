@model (List<User> Users, List<Schedule> Schedules, List<Leave> Leaves, int departmentId, int month, int year)

@{
    var currentYear = Model.year;
    var selectedMonth = Model.month;
    var firstDay = new DateTime(currentYear, selectedMonth, 1);
    var daysInMonth = DateTime.DaysInMonth(currentYear, selectedMonth);
    var prevMonth = firstDay.AddMonths(-1);
    var nextMonth = firstDay.AddMonths(1);

    var schedules = Model.Schedules;
    var leaves = Model.Leaves;
    var users = Model.Users;
    var userIds = users.Select(u => u.Personnel_ID).ToHashSet();
    var departmentId = Model.departmentId;
    var isProdDept = new[] { 1, 2, 3 }.Contains(departmentId);

    var shiftLeaders = ViewBag.ShiftLeaders as List<(DateTime, int, string)> ?? new List<(DateTime, int, string)>();
    var shifts = ViewBag.Shifts as List<Shift> ?? new List<Shift>();
    var sectors = ViewBag.Sectors as List<Sector> ?? new List<Sector>();
    var leaveTypes = ViewBag.LeaveTypes as List<Leave_type> ?? new List<Leave_type>();
    var holidays = ViewBag.Holidays as List<Holiday> ?? new List<Holiday>();
    var companyHolidayDates = holidays.Where(h => h.Type == "Company").Select(h => h.Date).ToHashSet();
}

<div class="row">
    <div class="col mb-3">
        <div class="card p-3">
            <div id="loading-spinner" class="position-absolute top-50 start-50 z-3 d-none">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>

            <div class="row justify-content-between mb-3">
                <div class="col-auto">
                    <a class="btn btn-light border" id="prevBtn">
                        <i class="bi bi-arrow-bar-left"></i> @prevMonth.ToString("MMM")
                    </a>
                </div>
                <div class="col">
                    <h3 class="text-center mb-0">@firstDay.ToString("MMMM yyyy")</h3>
                </div>
                <div class="col-auto">
                    <a class="btn btn-light border" id="nextBtn">
                        @nextMonth.ToString("MMM") <i class="bi bi-arrow-bar-right"></i>
                    </a>
                </div>
            </div>

            <div class="table-responsive" style="max-height: calc(100vh - 275px);">
                <table id="schedule" class="table table-sm table-borderless table-hover m-0" style="border-collapse: separate; border-spacing: 0;">
                    <thead class="text-center sticky-top" style="z-index:4;">
                        <tr>
                            <th class="border border-secondary align-content-center fs-5">Name</th>
                            @for (int day = 1; day <= daysInMonth; day++)
                            {
                                var date = new DateTime(currentYear, selectedMonth, day);
                                var isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                                var holiday = holidays.FirstOrDefault(h => h.Date == date);

                                var holidayClass = date.Date == DateTime.Today
                                ? "bg-primary text-white"
                                : holiday != null
                                    ? (holiday.Type == "Company" ? "bg-secondary text-white" : "bg-secondary-subtle text-secondary-emphasis")
                                    : (isWeekend ? "bg-secondary-subtle text-secondary-emphasis" : "");

                                var holidayPopover = holiday != null
                                ? $"data-bs-toggle='popover' data-bs-placement='top' data-bs-trigger='focus hover' data-bs-content='{holiday.Name}' tabindex='0'"
                                : "";

                                <td class="border border-start-0 border-secondary @holidayClass" @Html.Raw(holidayPopover)>
                                    <p class="m-0 fw-semibold fs-5">@day</p>
                                    <small class="fw-light font-monospace">@date.ToString("ddd")</small>
                                </td>
                            }
                        </tr>
                    </thead>

                    @foreach (var sector in users.GroupBy(u => u.Sector_ID))
                    {
                        <tbody class="sector">
                            <tr class="sectorName">
                                <td class="border-bottom border-secondary pb-1" colspan="@(daysInMonth + 1)">
                                    <small class="fw-bold">
                                        @sectors?.FirstOrDefault(s => s.Sector_ID == sector.Key)?.Sector_name
                                    </small>
                                </td>
                            </tr>

                            @foreach (var user in sector)
                            {
                                var trainingPeriod = user.Date_hired.HasValue ? user.Date_hired.Value.AddMonths(3) : DateTime.MinValue;
                                var isTrainee = trainingPeriod.Date >= new DateTime(currentYear, selectedMonth, daysInMonth).Date;
                                var isPartTime = user.Employment_type == "PartTime";

                                <tr>
                                    <td class="border border-top-0 border-secondary text-nowrap text-start fs-4
                                        @(isTrainee ? "bg-success-subtle text-success-emphasis" : "")">
                                        <div class="row my-0">
                                            <div class="col align-self-center text-truncate">
                                                @user.Full_name
                                            </div>
                                            @if (isPartTime)
                                            {
                                                <div class="col-auto border-start ps-1">
                                                    <div class="row mx-2" style="width:30px;">
                                                        <div class="col px-0 text-center fs-5">
                                                            In
                                                        </div>
                                                    </div>
                                                    <div class="text-secondary">
                                                        <hr class="m-0">
                                                    </div>
                                                    <div class="row mx-2" style="width:30px;">
                                                        <div class="col px-0 text-center fs-5">
                                                            Out
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </td>

                                    @for (int day = 1; day <= daysInMonth; day++)
                                    {
                                        var date = new DateTime(currentYear, selectedMonth, day);
                                        var dateStr = date.ToString("yyyy-MM-dd");
                                        var isWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday;
                                        var schedule = schedules.FirstOrDefault(s => s.Personnel_ID == user.Personnel_ID && s.Date == date);
                                        var shift = shifts.FirstOrDefault(s => s.Shift_ID == (schedule?.Shift_ID ?? 0));
                                        var leave = leaves.FirstOrDefault(l => l.Personnel_ID == user.Personnel_ID && date >= l.Date_start && date <= l.Date_end);
                                        var hasLeave = leave != null && shift != null;
                                        var holiday = holidays.FirstOrDefault(h => h.Date == date);

                                        bool isCurrentShiftLeader = shiftLeaders.Any(s => s.Item1.Date == date.Date && s.Item2 == user.Personnel_ID);
                                        bool isStillTrainee = trainingPeriod.Date >= date.Date;
                                        bool isCompanyHoliday = holiday?.Type == "Company";
                                        var cellClass = holiday != null
                                        ? (isCompanyHoliday ? "bg-secondary" : "bg-secondary-subtle")
                                        : (isWeekend ? "bg-secondary-subtle" : "");

                                        string leaveTypeName = string.Empty;
                                        string leavePopover = string.Empty;
                                        string bgClass = "visually-hidden";

                                        if (hasLeave && !isCompanyHoliday)
                                        {
                                            leaveTypeName = leaveTypes?.FirstOrDefault(l => l.Leave_type_ID == leave?.Leave_type_ID)?.Leave_type_name ?? string.Empty;
                                            leavePopover = $"data-bs-toggle='popover' data-bs-placement='top' data-bs-trigger='hover' data-bs-html='true' data-bs-content='<strong>{(leave?.Day_type != "FullDay" ? "Half day " : "")}{leaveTypeName}</strong>' tabindex='0'";
                                            bgClass = $"bg-{leave?.Leave_type?.BsColor} bg-gradient {leave?.Day_type}";
                                        }

                                        <td id="cell-@user.Personnel_ID-@dateStr" class="px-0 @cellClass @(isStillTrainee ? "text-success fw-semibold" : "") position-relative border-bottom border-end border-secondary" @Html.Raw(leavePopover)>
                                            @if (!isCompanyHoliday)
                                            {
                                                @if (isPartTime)
                                                {
                                                    <p class="p-0 m-0 fs-5 text-center">@(schedule?.Time_in != null ? schedule?.Time_in?.ToString(@"hh\:mm") : Html.Raw("&nbsp;"))</p>
                                                    <div class="text-secondary">
                                                        <hr class="m-0">
                                                    </div>
                                                    <p class="p-0 m-0 fs-5 text-center">@(schedule?.Time_out != null ? schedule?.Time_out?.ToString(@"hh\:mm") : Html.Raw("&nbsp;"))</p>
                                                }
                                                else
                                                {
                                                    <p class="p-0 m-0 fs-4 text-center position-absolute start-0 w-100 h-100 @(isCurrentShiftLeader ? "currentShiftLeader" : "") @(leave != null && leave.Day_type != "FullDay" ? "z-2" : "z-1")">@(leave != null && leave.Day_type == "FullDay" ? "" : shift?.Acronym ?? shift?.Shift_name)</p>
                                                }

                                                <p id="p-@user.Personnel_ID-@dateStr" class="position-absolute m-0 start-0 top-0 w-100 h-100 text-center @(leave != null && leave.Day_type != "FullDay" ? "z-1" : "z-2") @bgClass"></p>

                                                @if (schedule?.Comment == "cancelled")
                                                {
                                                    <svg class="position-absolute top-0 start-0 w-100 h-100">
                                                        <line x1="0" y1="0" x2="100%" y2="100%" stroke="red" stroke-width="1" />
                                                        <line x1="100%" y1="0" x2="0" y2="100%" stroke="red" stroke-width="1" />
                                                    </svg>
                                                }
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    }
                    
                    @if (isProdDept) // only show for production departments
                    {
                        <tfoot class="sticky-bottom z-2">
                            @foreach (var shift in shifts.Where(s => new[] { "A", "B", "C" }.Contains(s.Shift_name)))
                            {
                                <tr>
                                    <td class="border-end border-secondary fw-semibold text-end fs-5">Shift @shift.Shift_name</td>
                                    @for (int day = 1; day <= daysInMonth; day++)
                                    {
                                        var date = new DateTime(currentYear, selectedMonth, day);
                                        var count = schedules.Count(s =>
                                            s.Shift_ID == shift.Shift_ID &&
                                            s.Comment != "cancelled" &&
                                            s.Date == date &&
                                            userIds.Contains(s.Personnel_ID) &&
                                            !companyHolidayDates.Contains(date) && 
                                            !leaves.Any(l => l.Personnel_ID == s.Personnel_ID && l.Status == "Approved" && l.Date_start.Date <= date.Date && l.Date_end.Date >= date.Date));

                                        var bgColor = count switch
                                        {
                                            0 => "bg-danger-subtle text-danger-emphasis",
                                            1 => "bg-warning-subtle text-warning-emphasis",
                                            2 => "bg-success-subtle text-success-emphasis",
                                            _ => "bg-success text-white"
                                        };

                                        <td class="border-bottom border-end border-secondary text-center fs-5 @bgColor" id="shift-@shift.Shift_name-@date.ToString("yyyy-MM-dd")">
                                            @count
                                        </td>
                                    }
                                </tr>
                            }
                        </tfoot>
                    }
                </table>
            </div>
        </div>
    </div>
    <div class="col-12 col-xxl-2" id="legendsAndShifts" style="display:none;">
        @* Leave Legends *@
        <div class="card p-3 mb-3 fs-5">
            <small class="text-body-secondary mb-2">Reflected leaves</small>
            @foreach (var leaveType in leaveTypes)
            {
                <p class="mb-2"><span class="bg-@leaveType?.BsColor rounded-1 font-monospace">&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;@leaveType?.Leave_type_name</p>
            }
            <p class="mb-0"><span class="bg-secondary rounded-1 font-monospace">&nbsp;&nbsp;&nbsp;</span>&nbsp;&nbsp;Company holiday</p>
        </div>

        @* Shift Patterns *@
        @foreach (var pattern in new[] { "4/2", "5/2" })
        {
            var shiftPattern = shifts.Where(s => s.Pattern == pattern).ToList();
            if (shiftPattern.Any())
            {
                <div class="card py-2 px-4 mb-3">
                    <table class="table table-sm text-center fs-5">
                        <thead>
                            <tr><th colspan="2">@pattern pattern</th></tr>
                            <tr><th>Shift</th><th>Time</th></tr>
                        </thead>
                        <tbody>
                            @foreach (var shift in shiftPattern)
                            {
                                // string shiftName = shift?.Shift_name ?? string.Empty;

                                // if (shiftName?.Length > 3)
                                // {
                                //     string noVowels = new string(shift?.Shift_name?.Where(c => !"aeiouAEIOU".Contains(c)).ToArray());

                                //     if (!string.IsNullOrWhiteSpace(noVowels))
                                //     {
                                //         shiftName = noVowels.Length == 1 ? noVowels : $"{noVowels.First()}{noVowels.Last()}";
                                //     }
                                // }

                                <tr>
                                    @* <td>@(shift?.Shift_name?.Length > 3 ? $"{shiftName?.ToUpper()} ({shift?.Shift_name})" : shift?.Shift_name)</td> *@
                                    <td>@shift.Shift_name @(!string.IsNullOrEmpty(shift?.Acronym) ? $"({shift?.Acronym})" : "")</td>
                                    <td>@($"{shift?.Time_start?.ToString(@"hh\:mm")} - {shift?.Time_end?.ToString(@"hh\:mm")}")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        }
    </div>
</div>