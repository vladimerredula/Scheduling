@model (List<Schedule> Schedules, List<Shift> Shifts, List<Leave> Leaves, List<Holiday> Holidays, int Month, int Year)

@{
    ViewData["Title"] = "Calendar";
    var leaves = ViewBag.LeaveTypes as List<Leave_type>;
}

<div class="container">
    <h2 class="mb-0">@ViewData["Title"]</h2>
    <p class="mb-3"><a asp-action="Index">View all schedules</a></p>
    <div class="row mb-3 justify-content-between">
        <!-- Month Selection -->
        <div class="col-auto mb-2">
            <label for="monthSelect" class="form-label">Month</label>
            <input type="text" class="form-control" id="monthPicker">
        </div>
        <div class="col-auto align-self-end">
            <a class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#leaveModal">Apply for leave</a>
            <a id="toggleLegendsBtn" class="btn btn-light border">Show legends</a>
        </div>
    </div>
    <div id="calendarTable">
        <partial name="_CalendarTable"/>
    </div>
</div>

<!-- Leave Modal -->
<div class="modal fade" id="leaveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Assign leave</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Leave" asp-action="Apply">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Leave type</label><span class="text-danger" title="Required">*</span>
                            <select name="Leave_type_ID" id="Leave_type_ID" class="form-select" data-val="true" data-val-required="The Leave type field is required." required>
                                <option value="" disabled selected>Choose..</option>
                                @foreach (var leave in leaves)
                                {
                                    <option value="@leave.Leave_type_ID">@leave.Leave_type_name</option>
                                }
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="Leave_type_ID" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Start</label><span class="text-danger" title="Required">*</span>
                            <input class="form-control" type="date" name="Date_start" id="Date_start" placeholder="mm/dd/yyyyy" data-val="true" data-val-required="The Date start field is required." required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Date_start" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col">
                            <label class="form-label">End</label><span class="text-danger" title="Required">*</span>
                            <input class="form-control" type="date" name="Date_end" id="Date_end" placeholder="mm/dd/yyyyy" data-val="true" data-val-required="The Date end field is required." required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Date_end" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Confirm</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function (){
            initializePopovers();
            adjustTableColumns();

            $('#monthPicker').datepicker({
                format: "MM yyyy",
                minViewMode: 1,
                maxViewMode: 2,
                autoclose: true
            }).datepicker('setDate', new Date(@Model.Year,@(Model.Month - 1))).on("changeDate", function (e) {
                let selectedDate = e.date;
                let month = selectedDate.getMonth() + 1; // getMonth() returns month from 0 to 11
                let year = selectedDate.getFullYear();
                loadSchedule(month, year);
            });

            $("#Date_start").on("click", function () {
                $(this)[0].showPicker();
            });

            $("#Date_start").on("change", function () {
                let startDateVal = new Date($(this).val());
                let endDate = $("#Date_end").val();

                if (endDate) {
                    let endDateVal = new Date(endDate);
                    if (endDateVal < startDateVal) {
                        $(this)
                            .closest("form")
                            .validate()
                            .showErrors({
                                "Date_start": "Start date cannot be later than the end date."
                            });
                        $(this).val("");
                    }
                } else {
                    $(this).blur();
                    $("#Date_end").focus();
                    $("#Date_end")[0].showPicker();
                }
            });

            $("#Date_end").on("click", function () {
                $(this)[0].showPicker();
            });

            $("#Date_end").on("change", function () {
                let endDateVal = new Date($(this).val());
                let startDate = $("#Date_start").val();

                if (startDate) {
                    let startDateVal = new Date(startDate);
                    if (endDateVal < startDateVal) {
                        $(this)
                            .closest("form")
                            .validate()
                            .showErrors({
                                "Date_end": "End date cannot be earlier than the start date."
                            });
                        $(this).val("");
                    }
                }
            });

            initializeToggleLegends(); // Initialize the toggle legends button
        });
        
        $(window).on('resize', adjustTableColumns); // Optional: handle resizing

        $("#downloadBtn").on("click", function () {
            let date = $('#monthPicker').datepicker("getDate");
            $("#month").val(date.getMonth() + 1);
            $("#year").val(date.getFullYear());

            // console.log($("#month").val(),$("#year").val());
            $("#downloadForm").submit();
        });

        function initializePopovers() {
            $('[data-bs-toggle="tooltip"]').tooltip();
            $('[data-bs-toggle="popover"]').popover();
        }

        function initializeToggleLegends() {
            const toggleLegendsBtn = $("#toggleLegendsBtn");
            const legendsAndShifts = $("#legendsAndShifts");

            // Check localStorage for the saved state
            const savedState = localStorage.getItem("legendsAndShiftsVisible");

            if (savedState === "hidden") {
                legendsAndShifts.hide();
                toggleLegendsBtn.text("Show legends");
            } else {
                legendsAndShifts.show();
                toggleLegendsBtn.text("Hide legends");
            }

            // Toggle button click event
            toggleLegendsBtn.off("click").on("click", function () { // Use .off() to prevent duplicate event bindings
                legendsAndShifts.toggle(); // Toggle visibility

                if (legendsAndShifts.is(":visible")) {
                    toggleLegendsBtn.text("Hide legends");
                    localStorage.setItem("legendsAndShiftsVisible", "visible"); // Save state
                } else {
                    toggleLegendsBtn.text("Show legends");
                    localStorage.setItem("legendsAndShiftsVisible", "hidden"); // Save state
                }
            });
        }

        $(document).on("click", "#prevBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let prevMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);
                $datepicker.datepicker('setDate', prevMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        $(document).on("click", "#nextBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let nextMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);
                $datepicker.datepicker('setDate', nextMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        function showSpinner() {
            $("#loading-spinner").removeClass("d-none");
        }

        function hideSpinner() {
            $("#loading-spinner").addClass("d-none");
        }

        function loadSchedule(month, year) {
            showSpinner();
            $.ajax({
                url: '/Schedule/GetCalendar',
                type: 'GET',
                data: {
                    month: month,
                    year: year
                },
                success: function (response) {
                    $("#calendarTable").html(response);
                    hideSpinner();
                    initializeToggleLegends(); // Reinitialize the toggle legends button
                    initializePopovers();
                    adjustTableColumns();
                },
                error: function () {
                    alert("Error loading schedule.");
                }
            });
        }

        function getLeave(id) {
            console.log(id);
            $.ajax({
                url: '/Leave/GetLeave',
                type: 'POST',
                data: {
                    Id: id
                },
                success: function (response) {
                    $("#name").text(response.name);
                    $("#leaveType").text(response.leave_type_name);
                    $("#date").text(`${response.date_start} to ${response.date_end}`);
                    $("#comment").text(response.comment);

                    $("#approveBtn").attr("href", `/Leave/Approve1/${response.leave_ID}`);
                    $("#denyBtn").attr("data-id", response.leave_ID);
                    // $("#denyBtn").attr("href", `/Leave/Deny1/${response.leave_ID}`);
                },
                error: function () {
                    alert('An error occurred while assigning the shift.');
                }
            });
            $("#approveModal").modal("show");
        }

        $("#denyBtn").on("click", function () {
            console.log("Yes");
            $("#denyName").text($("#name").text());
            $("#denyLeaveType").text($("#leaveType").text());
            $("#denyDate").text($("#date").text());
            $("#denyID").val($(this).data("id"));

            // Show the modal
            $("#denyModal").modal("show");
        });

        function removeLeaveBg(p) {
            $(p).removeClass("bg-secondary bg-secondary-subtle text-secondary-emphasis");
        }

        function removeColorClass(e) {
            $(e).removeClass("bg-danger-subtle text-danger-emphasis bg-warning-subtle text-warning-emphasis bg-success-subtle text-success-emphasis bg-success text-white");
        }

        function adjustTableColumns() {
            let table = $('#calendar');
            let columns = table.find('thead th');
            let totalColumns = columns.length;
            let availableWidth = table.width();
            let columnWidth = Math.floor(availableWidth / (totalColumns - 1));

            columns.each(function (index) {
                // $(this).css('width', columnWidth + 'px');
                $(this).attr("style", "width: " + columnWidth + "px !important;");
            });
        }
    </script>
}
