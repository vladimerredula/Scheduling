@using System.Globalization;
@model (List<User> Users, List<Shift> Shifts, List<Schedule> Schedules, List<Leave> Leaves, List<Holiday> Holidays, int month, int year)
@{
    ViewData["Title"] = "Schedules";

    var currentYear = Model.year;
    var selectedMonth = Model.month;
    var sectors = ViewBag.Sectors as List<Sector>;
    var daysInMonth = DateTime.DaysInMonth(currentYear, selectedMonth);
}

<div class="px-3 px-sm-5" id="viewSchedule">
    <h2>@ViewData["Title"]</h2>

    <div class="row mb-3 justify-content-between">
        <div class="col-auto">
            <div class="row">
                <div class="col-auto mb-2">
                    <form asp-action="ScheduleView" id="scheduleViewForm">
                        <label for="departmentId" class="form-label">Department</label>
                        <select name="departmentId" id="departmentId" class="form-select" asp-items="ViewBag.Departments">
                        </select>
                        <input name="month" id="month" hidden/>
                        <input name="year" id="year" hidden/>
                    </form>
                </div>
                <!-- Month Selection -->
                <div class="col-auto mb-2 visually-hidden">
                    <label for="monthSelect" class="form-label">Month</label>
                    <input type="text" class="form-control" id="monthPicker">
                </div>
            </div>
        </div>
        <div class="col-auto align-self-end">
            <a class="btn btn-light border fullscreenBtn" title="Fullscreen">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-angle-expand" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707m4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707" />
                </svg>
            </a>
            <a id="toggleLegendsBtn" class="btn btn-light border">Show legends</a>
        </div>
    </div>

    <div id="scheduleTable">
        <partial name="_ScheduleView" />
    </div>
</div>

@section Scripts {
    <script>
        let cancelSort = false;
        let previousValue;

        $(document).ready(function (){
            initializePopovers();

            $('#monthPicker').datepicker({
                format: "MM yyyy",
                minViewMode: 1,
                maxViewMode: 2,
                autoclose: true
            }).datepicker('setDate', new Date(@Model.year,@(Model.month - 1))).on("changeDate", function (e) {
                let selectedDate = e.date;
                let month = selectedDate.getMonth() + 1; // getMonth() returns month from 0 to 11
                let year = selectedDate.getFullYear();
                loadSchedule(month, year);
            });

            adjustTableColumns();
            initializeToggleLegends(); // Initialize the toggle legends button
            $(window).on('resize', adjustTableColumns); // Optional: handle resizing

            $('.fullscreenBtn').on('click', function () {
                const scheduleContainer = $("#viewSchedule").get(0); // Get the native DOM element

                if (!document.fullscreenElement) {
                    $(this).html(`
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-angle-contract" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M.172 15.828a.5.5 0 0 0 .707 0l4.096-4.096V14.5a.5.5 0 1 0 1 0v-3.975a.5.5 0 0 0-.5-.5H1.5a.5.5 0 0 0 0 1h2.768L.172 15.121a.5.5 0 0 0 0 .707M15.828.172a.5.5 0 0 0-.707 0l-4.096 4.096V1.5a.5.5 0 1 0-1 0v3.975a.5.5 0 0 0 .5.5H14.5a.5.5 0 0 0 0-1h-2.768L15.828.879a.5.5 0 0 0 0-.707"/>
                        </svg>
                    `);
                    $(this).attr("title", "Exit fullscreen");
                    $(scheduleContainer).addClass('fullscreen');
                    adjustTableColumns();
                    scheduleContainer.requestFullscreen().catch(err => {
                        console.error(`Error attempting to enable fullscreen mode: ${err.message}`);
                    });
                } else {
                    $(this).html(`
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrows-angle-expand" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707m4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707"/>
                        </svg>
                    `);
                    $(this).attr("title", "Fullscreen");
                    document.exitFullscreen();
                    $(scheduleContainer).removeClass('fullscreen');
                    adjustTableColumns();
                }
            });

            setInterval(() => {
                // Your code to run every 1 minute
                console.log("Running refresh");
                let date = $('#monthPicker').datepicker("getDate");
                loadSchedule(date.getMonth() + 1, date.getFullYear());
            }, 300000);
        });

        function adjustTableColumns() {
            const table = $('#schedule');
            const columns = table.find('thead th');
            const totalColumns = columns.length;
            const firstColumnWidth = 230; // px
            const availableWidth = table.width() - firstColumnWidth;
            const otherColumnWidth = Math.floor(availableWidth / (totalColumns - 1));

            columns.each(function (index) {
                if (index === 0) {
                    $(this).css('width', firstColumnWidth + 'px');
                } else {
                    $(this).css('width', otherColumnWidth + 'px');
                }
            });
        }

        function initializePopovers() {
            $('[data-bs-toggle="tooltip"]').tooltip();
            $('[data-bs-toggle="popover"]').popover();
        }

        function initializeToggleLegends() {
            const toggleLegendsBtn = $("#toggleLegendsBtn");
            const legendsAndShifts = $("#legendsAndShifts");

            // Check localStorage for the saved state
            const savedState = localStorage.getItem("legendsAndShiftsVisible");

            if (savedState === "hidden") {
                legendsAndShifts.hide();
                toggleLegendsBtn.text("Show legends");
            } else {
                legendsAndShifts.show();
                toggleLegendsBtn.text("Hide legends");
            }

            // Toggle button click event
            toggleLegendsBtn.off("click").on("click", function () { // Use .off() to prevent duplicate event bindings
                legendsAndShifts.toggle(); // Toggle visibility

                if (legendsAndShifts.is(":visible")) {
                    toggleLegendsBtn.text("Hide legends");
                    localStorage.setItem("legendsAndShiftsVisible", "visible"); // Save state
                } else {
                    toggleLegendsBtn.text("Show legends");
                    localStorage.setItem("legendsAndShiftsVisible", "hidden"); // Save state
                }
            });
        }

        $("#departmentId").on("change", function () {
            let date = $('#monthPicker').datepicker("getDate");
            loadSchedule(date.getMonth() + 1, date.getFullYear());
        });

        $(document).on("click", "#prevBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let prevMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);
                $datepicker.datepicker('setDate', prevMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        $(document).on("click", "#nextBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let nextMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);
                $datepicker.datepicker('setDate', nextMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        function loadSchedule(month, year) {
            let departmentId = $("#departmentId").val();

            $.ajax({
                url: '/Schedule/LoadScheduleView',
                type: 'GET',
                data: {
                    month: month,
                    year: year,
                    departmentId: departmentId
                },
                success: function (response) {
                    $("#scheduleTable").html(response);
                    adjustTableColumns();
                    initializeToggleLegends(); // Reinitialize the toggle legends button
                    initializePopovers();
                },
                error: function () {
                    alert("Error loading schedule.");
                }
            });
        }
    </script>
}
