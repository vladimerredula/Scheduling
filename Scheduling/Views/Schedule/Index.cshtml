@model (List<User> Users, List<Shift> Shifts, List<Schedule> Schedules, List<Leave> Leaves, List<Holiday> Holidays, int month, int year)
@{
    ViewData["Title"] = "Schedules";

    var leaves = ViewBag.LeaveTypes as List<Leave_type> ?? new List<Leave_type>();

    // Permissions
    var deptSelect = _template.HasPermission("DeptSelect");
    var monthSelect = _template.HasPermission("MonthSelect");
    var empSearch = _template.HasPermission("EmpSearch");
    var leaveBtn = _template.HasPermission("LeaveBtn");
    var downloadBtn = _template.HasPermission("DownloadBtn");
    var legendBtn = _template.HasPermission("LegendBtn");
    var canApprove = _template.HasPermission("ApproveLeave");
    var canDeny = _template.HasPermission("DenyLeave");
}

<div class="px-3 px-sm-5">
    <h2 class="mb-0">@ViewData["Title"]</h2>
    <p class="mb-3"><a asp-action="Calendar">View Calendar</a></p>

    <div class="row mb-3 justify-content-between">
        <div class="col-auto">
            <div class="row">
                @if (deptSelect)
                {
                    <!-- Department Dropdown -->
                    <div class="col-6 col-sm-auto mb-2">
                        <form asp-controller="Download" asp-action="DownloadSchedule" id="downloadForm">
                            <input name="month" id="month" hidden />
                            <input name="year" id="year" hidden />

                            <label for="departmentId" class="form-label">Department</label>
                            <select name="departmentId" id="departmentId" class="form-select" asp-items="ViewBag.Departments">
                            </select>
                        </form>
                    </div>
                }
                @if (monthSelect)
                {
                    <!-- Month Selection -->
                    <div class="col-6 col-sm-auto mb-2">
                        <label for="monthSelect" class="form-label">Month</label>
                        <input type="text" class="form-control" id="monthPicker">
                    </div>
                }
                @if (empSearch)
                {
                    <!-- Employee Search -->
                    <div class="col-6 col-sm-auto mb-2 align-self-end">
                        <input type="text" id="searchBox" class="form-control" placeholder="Search employee..." />
                    </div>
                }
            </div>
        </div>
        <div class="col-auto align-self-end hstack gap-2">
            @if (leaveBtn)
            {
                <a class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#leaveModal">Apply for leave</a>
            }
            @if (downloadBtn)
            {
                <a class="btn btn-light border" id="downloadBtn"><i class="bi bi-download"></i> Download</a>
            }
            @if (legendBtn)
            {
                <a id="toggleLegendsBtn" class="btn btn-light border">Show legends</a>
            }
            <!-- <a class="btn btn-light border me-1" onclick="printSchedule()" title="Print Schedule"><i class="bi bi-printer"></i></a>
            <a class="btn btn-light border" title="Fullscreen"><i class="bi bi-arrows-fullscreen"></i></a> -->
        </div>
    </div>

    <div id="scheduleTable">
        <partial name="_ScheduleTable" />
    </div>
</div>

<!-- Leave Modal -->
<div class="modal fade" id="leaveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Apply for leave</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Leave" asp-action="Apply">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Leave type</label><span class="text-danger" title="Required">*</span>
                            <select name="Leave_type_ID" id="Leave_type_ID" class="form-select" data-val="true" data-val-required="The Leave type field is required." required>
                                <option value="" disabled selected>Choose..</option>
                                @foreach (var leave in leaves)
                                {
                                    <option value="@leave.Leave_type_ID">@leave.Leave_type_name</option>
                                }
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="Leave_type_ID" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Start</label><span class="text-danger" title="Required">*</span>
                            <input class="form-control" type="date" name="Date_start" id="Date_start" placeholder="mm/dd/yyyyy" data-val="true" data-val-required="The Date start field is required." required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Date_start" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col">
                            <label class="form-label">End</label><span class="text-danger" title="Required">*</span>
                            <input class="form-control" type="date" name="Date_end" id="Date_end" placeholder="mm/dd/yyyyy" data-val="true" data-val-required="The Date end field is required." required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Date_end" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label class="form-label" for="requestmsg">Message</label>
                            <textarea class="form-control" name="Message" id="requestmsg" style="height: 120px"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Confirm</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Approve/deny leave Modal -->
<div class="modal fade" id="approveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Leave application</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    <dt class="col-sm-3 text-end">
                        Name
                    </dt>
                    <dd class="col-sm-9" id="name">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Leave type
                    </dt>
                    <dd class="col-sm-9" id="leaveType">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Date
                    </dt>
                    <dd class="col-sm-9" id="date">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Message
                    </dt>
                    <dd class="col-sm-9" id="message">
                    </dd>
                </dl>
            </div>
            <div class="modal-footer border-0">
                @if (canDeny)
                {
                    <a class="btn btn-danger" id="denyBtn" data-id="">Deny</a>
                }
                @if (canApprove)
                {
                    <a class="btn btn-success" id="approveBtn">Approve</a>
                }
            </div>
        </div>
    </div>
</div>

<!-- Deny modal -->
<div class="modal fade" id="denyModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="denyModalLabel">Deny this leave?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Leave" asp-action="Deny1" id="denyForm">
                <div class="modal-body">
                    <dl class="row">
                        <dt class="col-sm-3 text-end">
                            Name
                        </dt>
                        <dd class="col-sm-9" id="denyName">
                        </dd>
                        <dt class="col-sm-3 text-end">
                            Leave type
                        </dt>
                        <dd class="col-sm-9" id="denyLeaveType">
                        </dd>
                        <dt class="col-sm-3 text-end">
                            Date
                        </dt>
                        <dd class="col-sm-9" id="denyDate">
                        </dd>
                        <dt class="col-sm-3 text-end">
                            Message
                        </dt>
                        <dd class="col-sm-9" id="denyMessage">
                        </dd>
                    </dl>
                    <div class="row">
                        <div class="col">
                            <label for="Comment" class="form-label">Reason</label><span class="text-danger" title="Required">*</span>
                            <textarea name="Comment" id="Comment" class="form-control" data-val="true" data-val-required="The Reason field is required." required></textarea>
                            <span class="text-danger field-validation-valid" data-valmsg-for="Comment" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <input type="hidden" name="id" id="denyID" />
                    <a class="btn btn-link" href="javascript:void(0)" data-bs-dismiss="modal">No</a>
                    <input type="submit" value="Yes, proceed" class="btn btn-danger" />
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        let cancelSort = false;
        let previousValue;

        $(document).ready(function (){
            initializeFlatpickr();
            initializePopovers();
            initializeContextMenus();

            $('#monthPicker').datepicker({
                format: "MM yyyy",
                minViewMode: 1,
                maxViewMode: 2,
                autoclose: true
            }).datepicker('setDate', new Date(@Model.year,@(Model.month - 1))).on("changeDate", function (e) {
                let selectedDate = e.date;
                let month = selectedDate.getMonth() + 1; // getMonth() returns month from 0 to 11
                let year = selectedDate.getFullYear();
                loadSchedule(month, year);
            });

            $("#Date_start").on("click", function () {
                $(this)[0].showPicker();
            });

            $("#Date_start").on("change", function () {
                let startDateVal = new Date($(this).val());
                let endDate = $("#Date_end").val();

                if (endDate) {
                    let endDateVal = new Date(endDate);
                    if (endDateVal < startDateVal) {
                        $(this)
                            .closest("form")
                            .validate()
                            .showErrors({
                                "Date_start": "Start date cannot be later than the end date."
                            });
                        $(this).val("");
                    }
                } else {
                    $(this).blur();
                    $("#Date_end").focus();
                    $("#Date_end")[0].showPicker();
                }
            });

            $("#Date_end").on("click", function () {
                $(this)[0].showPicker();
            });

            $("#Date_end").on("change", function () {
                let endDateVal = new Date($(this).val());
                let startDate = $("#Date_start").val();

                if (startDate) {
                    let startDateVal = new Date(startDate);
                    if (endDateVal < startDateVal) {
                        $(this)
                            .closest("form")
                            .validate()
                            .showErrors({
                                "Date_end": "End date cannot be earlier than the start date."
                            });
                        $(this).val("");
                    }
                }
            });

            initializeToggleLegends(); // Initialize the toggle legends button
            initializeSortable(); // Initial call to initialize sortable functionality

            // ESC key handler to cancel drag
            $(document).on("keydown", function (e) {
              if (e.key === "Escape") {
                cancelSort = true;
              }
            });

            adjustTableColumns();
            $(window).on('resize', adjustTableColumns); // Optional: handle resizing
            filterTable();
        });

        function initializeContextMenus() {
            $(".setShiftLeader").on("contextmenu", function (e) {
                e.preventDefault(); // prevent the default browser menu

                var shift = $(this).find("option:selected").text().trim();
                var [select,userId,date] = this.id.split("|");

                if (["A", "B", "C"].includes(shift)) {

                    // Remove any existing menu
                    $(".scheduleMenu").remove();

                    const offset = $(this).offset();
                    const width = $(this).outerWidth();
                    const height = $(this).outerHeight();

                    // Build the menu
                    const $menu = $("<ul>", {
                        class: "scheduleMenu list-group shadow position-absolute text-nowrap z-3",
                        css: {
                            top: 10 + "px",
                            left: width + "px"
                        }
                    });

                    $("<li>", {
                        class: "list-group-item list-group-item-action",
                        html:
                            `
                            <input class="form-check-input me-1" type="checkbox" value="" id="slSched" onchange="setShiftLeader(${userId},'${date}',this)">
                            <label class="form-check-label stretched-link" for="slSched">Shift leader for <strong>${shift} shift</strong></label>
                            `,
                    }).appendTo($menu);

                    // Append menu to the parent with position-relative (e.g. td or div)
                    $(this).parent().append($menu);

                    $(".scheduleMenu").find("input[type=checkbox]").prop("checked", $(this).hasClass("currentShiftLeader"));
                }
            });

            // $(".memberName").on("click", function () {
            //     Remove any existing menu
            //     $(".userMenu").remove();

            //     var [user,userId] = this.id.split("-");

            //     const offset = $(this).offset();
            //     const width = $(this).outerWidth();
            //     const height = $(this).outerHeight();

            //     Build the menu
            //     const $menu = $("<ul>", {
            //         class: "userMenu list-group shadow position-absolute text-nowrap z-3",
            //         css: {
            //             top: 0 + "px",
            //             left: width - 25 + "px"
            //         }
            //     });

            //     $("<li>", {
            //         class: "list-group-item list-group-item-action",
            //         html:
            //             `
            //             <input class="form-check-input me-1" type="checkbox" value="" id="slUser" onclick="assignShiftLeader(${userId}, this)">
            //             <label class="form-check-label stretched-link" for="slUser">Shift leader</label>
            //             `
            //     }).appendTo($menu);

            //     Append menu to the parent with position-relative (e.g. td or div)
            //     $(this).append($menu);

            //     $(".userMenu").find("input[type=checkbox]").prop("checked", $(this).hasClass("isShiftLeader"));
            // });

            // Hide menu on click elsewhere
            $(document).on("mousedown", function (e) {
                if (!$(e.target).closest(".scheduleMenu").length) {
                    $(".scheduleMenu").remove();
                }

                if (!$(e.target).closest("#userMenu").length) {
                    $(".userMenu").remove();
                }
            });
        }

        function initializeFlatpickr() {
            flatpickr(".timePicker", {
                enableTime: true,
                noCalendar: true,
                disableMobile: true,
                dateFormat: "H:i",
                time_24hr: true,
                minuteIncrement: 5,
                minTime: "00:00",
                allowInput: true,
                defaultDate: null,
                onChange: function(selectedDates, dateStr, instance) {
                    var input = instance._input; // The original input element

                    var id = input.id;
                    var [isTimeIn,userId,date] = id.split("|");

                    assignTime(userId, date, dateStr, isTimeIn == "in");
                }
            });
        }

        $("#downloadBtn").on("click", function () {
            let date = $('#monthPicker').datepicker("getDate");
            $("#month").val(date.getMonth() + 1);
            $("#year").val(date.getFullYear());

            // console.log($("#month").val(),$("#year").val());
            $("#downloadForm").submit();
        });

        function printSchedule() {
            let date = $('#monthPicker').datepicker("getDate");
            let month = date.getMonth() + 1;
            let year = date.getFullYear();
            let departmentId = $("#departmentId").val();

            $.ajax({
                url: '/Schedule/PrintSchedule',
                type: 'GET',
                data: {
                    month: month,
                    year: year,
                    departmentId: departmentId
                },
                success: function (response) {
                    var headstr = "<html><head><title></title></head><body>";
                    var footstr = "</"+"body></html>";
                    var newstr = response;
                    newstr = newstr.replace("sticky-top", ""); // remove sticky-bottom class
                    newstr = newstr.replace("sticky-bottom", ""); // remove sticky-bottom class
                    newstr = newstr.replace("control-form", "control-form control-form-sm"); // remove sticky-bottom class
                    newstr = newstr.replace("table table-borderless", "table table-borderless table-sm"); // remove sticky-bottom class
                    var oldstr = document.body.innerHTML;
                    document.body.innerHTML = headstr + newstr + footstr;
                    window.print();
                    document.body.innerHTML = oldstr;
                },
                error: function () {
                    alert("Error loading schedule.");
                }
            });
        }

        // Search functionality
        $("#searchBox").on("input", function () {
            filterTable();
        });

        function initializePopovers() {
            $('[data-bs-toggle="tooltip"]').tooltip();
            $('[data-bs-toggle="popover"]').popover();
        }

        function initializeToggleLegends() {
            const toggleLegendsBtn = $("#toggleLegendsBtn");
            const legendsAndShifts = $("#legendsAndShifts");

            // Check localStorage for the saved state
            const savedState = localStorage.getItem("legendsAndShiftsVisible");

            if (savedState === "hidden") {
                legendsAndShifts.hide();
                toggleLegendsBtn.text("Show legends");
            } else {
                legendsAndShifts.show();
                toggleLegendsBtn.text("Hide legends");
            }

            // Toggle button click event
            toggleLegendsBtn.off("click").on("click", function () { // Use .off() to prevent duplicate event bindings
                legendsAndShifts.toggle(); // Toggle visibility

                if (legendsAndShifts.is(":visible")) {
                    toggleLegendsBtn.text("Hide legends");
                    localStorage.setItem("legendsAndShiftsVisible", "visible"); // Save state
                } else {
                    toggleLegendsBtn.text("Show legends");
                    localStorage.setItem("legendsAndShiftsVisible", "hidden"); // Save state
                }
            });
        }

        function setShiftLeader(userId, date, checkbox) {
            var isShiftLeader = $(checkbox).is(":checked");
            $.ajax({
                url: '/Schedule/SetShiftLeader',
                type: 'POST',
                data: {
                    userId: userId,
                    date: date,
                    isShiftLeader: isShiftLeader
                },
                success: function (response) {
                    var select = $(`[id='select|${userId}|${date}']`);

                    // Remove existing shift leader of the current shift
                    removeCurrentShiftLeader(select.val(), date);

                    if (isShiftLeader) {
                        // Set as the current shiftleader
                        select.addClass("currentShiftLeader");
                    } else {
                        // Set as the current shiftleader
                        select.removeClass("currentShiftLeader");
                    }
                    $(".scheduleMenu").remove();
                },
                error: function () {
                    alert("Error loading schedule.");
                }
            });
        }

        // Assinging a user a shift leader position for the current month
        function assignShiftLeader(userId, checkbox) {
            $(".userMenu").remove();
            let date = $('#monthPicker').datepicker("getDate");
            console.log(date,userId,checkbox);
            $.ajax({
                url: '/Schedule/AssignShiftLeader',
                type: 'POST',
                data: {
                    userId: userId,
                    month: date.getMonth() + 1,
                    year: date.getFullYear(),
                    isShiftLeader: $(checkbox).is(":checked")
                },
                success: function (response) {
                    loadSchedule(date.getMonth() + 1, date.getFullYear());
                },
                error: function () {
                    alert("Error loading schedule.");
                }
            });
        }

        function removeCurrentShiftLeader(shiftId, date) {
            var currentShiftLeader = $(`select[data-date='${date}'].currentShiftLeader`).filter(function () {
                return $(this).val() == shiftId;
            });
            console.log(currentShiftLeader);
            if (currentShiftLeader.length) {
                currentShiftLeader.removeClass("currentShiftLeader");
            }
        }

        function filterTable() {
            let searchValue = $("#searchBox").val().toLowerCase();

            // Filter rows based on the search value
            $(".sector tr").filter(function () {
                let name = $(this).find("td:first").text().toLowerCase();
                $(this).toggle(name.includes(searchValue));
            });
        }

        function adjustTableColumns() {
            const table = $('#schedule');
            const columns = table.find('thead th');
            const totalColumns = columns.length;
            const firstColumnWidth = 230; // px
            const availableWidth = table.width() - firstColumnWidth;
            const otherColumnWidth = Math.floor(availableWidth / (totalColumns - 1));

            columns.each(function (index) {
                if (index === 0) {
                    $(this).css('width', firstColumnWidth + 'px');
                } else {
                    $(this).css('width', otherColumnWidth + 'px');
                }
            });
        }

        $(document).on('focus', 'select', function () {
            previousValue = $(this).val(); // Store the current value
        });

        $("#departmentId").on("change", function () {
            let date = $('#monthPicker').datepicker("getDate");
            loadSchedule(date.getMonth() + 1, date.getFullYear());
        });

        $(document).on("click", "#prevBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let prevMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);
                $datepicker.datepicker('setDate', prevMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        $(document).on("click", "#nextBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let nextMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);
                $datepicker.datepicker('setDate', nextMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        $(document).on("click", "#reloadBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                loadSchedule(currentDate.getMonth() + 1, currentDate.getFullYear());
            }
        });

        function initializeSortable() {
            $(".sector").sortable({
                items: ".draggable",
                handle: ".drag-handle",
                connectWith: ".sector", // Allow dragging between sectors
                cursor: "move",
                start: function (event, ui) {
                    cancelSort = false; // Reset flag on new drag
                },
                beforeStop: function (event, ui) {
                    if (cancelSort) {
                        $(this).sortable("cancel"); // Cancel the sort
                        cancelSort = false;
                    }
                },
                update: function (event, ui) {
                    let orders = $(".draggable").map(function () {
                        return this.id.replace("user-", "") + "-" + $(this).parent().data("sector-id"); // Extract user IDs
                    }).get().join(',');

                    let date = $('#monthPicker').datepicker("getDate");
                    let month = date.getMonth() + 1;
                    let year = date.getFullYear();

                    $.ajax({
                        url: '/Schedule/UpdateEmployeeOrder',
                        type: 'POST',
                        data: {
                            order: orders,
                            month: month,
                            year: year
                        },
                        success: function (response) {
                            if (!response.success) {
                                alert('Error updating user sector and order!');
                            }
                        },
                        error: function () {
                            alert('An error occurred while updating the user sector and order.');
                        }
                    });
                }
            }).disableSelection();
        }

        function showSpinner() {
            $("#loading-spinner").removeClass("d-none");
        }

        function hideSpinner() {
            $("#loading-spinner").addClass("d-none");
        }

        function loadSchedule(month, year) {
            let departmentId = $("#departmentId").val();

            showSpinner();
            $.ajax({
                url: '/Schedule/GetScheduleByMonth',
                type: 'GET',
                data: {
                    month: month,
                    year: year,
                    departmentId: departmentId
                },
                success: function (response) {
                    $("#scheduleTable").html(response);
                    hideSpinner();
                    initializeSortable(); // Reinitialize sortable functionality
                    initializeToggleLegends(); // Reinitialize the toggle legends button
                    adjustTableColumns();
                    filterTable();
                    initializePopovers();
                    initializeFlatpickr();
                    initializeContextMenus();
                },
                error: function () {
                    alert("Error loading schedule.");
                }
            });
        }

        function assignShift(userId, date, dropdown) {
            var shiftId = dropdown.value;

                $.ajax({
                    url: '/Schedule/AssignShift',
                    type: 'POST',
                    data: {
                        userId: userId,
                        date: date,
                        shiftId: shiftId
                    },
                    success: function (response) {
                        if (!response.success) {
                            alert('Error assigning shift!');
                        } else {
                            let cell = $(`#cell-${userId}-${date}`);

                            if (shiftId == 999) {
                                cell.append(`
                                    <svg class="position-absolute top-0 start-0 w-100 h-100">
                                        <line x1="0" y1="0" x2="100%" y2="100%" stroke="red" stroke-width="1" />
                                        <line x1="100%" y1="0" x2="0" y2="100%" stroke="red" stroke-width="1" />
                                    </svg>
                                `);

                                removeCancelOption(dropdown);
                                addUncancelOption(dropdown);

                                dropdown.value = previousValue;
                            } else if (shiftId == 998) {

                                removeUncancelOption(dropdown);
                                addCancelOption(dropdown);

                                cell.find("svg").remove();
                                dropdown.value = previousValue;
                            } else if (shiftId == 0) {
                                removeCancelOption(dropdown);
                                removeUncancelOption(dropdown);
                                cell.find("svg").remove();
                            } else {
                                addCancelOption(dropdown);
                                previousValue = dropdown.value;
                                cell.find("svg").remove();
                            }

                            updateShiftCount(date);
                        }
                    },
                    error: function () {
                        alert('An error occurred while assigning the shift.');
                    }
                });
            // }
        }

        function removeCancelOption(select) {
            let option = select.querySelector(`option[value="999"]`);
            if (option) {
                option.remove(); // Removes the option from the select
            }
        }

        function addCancelOption(select) {
            removeCancelOption(select);
            $(select).append(new Option("*Cancel shift", "999"));
        }

        function removeUncancelOption(select) {
            let option = select.querySelector(`option[value="998"]`);
            if (option) {
                option.remove(); // Removes the option from the select
            }
        }

        function addUncancelOption(select) {
            removeUncancelOption(select);
            $(select).append(new Option("*Uncancel shift", "998"));
        }

        function updateShiftCount(date) {
            let shiftTypes = ["A", "B", "C"];

            shiftTypes.forEach(shift => {
                let count = $(`select[data-date="${date}"]:not(:disabled):not(.onLeave)`).filter(function () {
                    return $(this).find('option:selected').text().trim() === shift;
                }).length;
                let cell = $(`#shift-${shift}-${date}`);

                cell.text(count);

                // Remove previous colors before applying the new one
                removeColorClass(cell);

                // Apply background color based on shift count
                if (count === 0) {
                    cell.addClass("bg-danger-subtle text-danger-emphasis"); // Light red
                } else if (count === 1) {
                    cell.addClass("bg-warning-subtle text-warning-emphasis"); // Light yellow
                } else if (count === 2) {
                    cell.addClass("bg-success-subtle text-success-emphasis"); // Light green
                } else {
                    cell.addClass("bg-success text-white"); // Green
                }
            });
        }

        function getLeave(id) {
            console.log(id);
            $.ajax({
                url: '/Leave/GetLeave',
                type: 'POST',
                data: {
                    Id: id
                },
                success: function (response) {
                    $("#name").text(response.name);
                    $("#leaveType").text(response.leave_type_name);
                    $("#date").text(`${response.date_start} to ${response.date_end}`);
                    $("#message").text(response.message);

                    $("#approveBtn").attr("href", `/Leave/Approve1/${response.leave_ID}`);
                    $("#denyBtn").attr("data-id", response.leave_ID);
                    // $("#denyBtn").attr("href", `/Leave/Deny1/${response.leave_ID}`);
                },
                error: function () {
                    alert('An error occurred while assigning the shift.');
                }
            });
            $("#approveModal").modal("show");
        }

        function toggleLeave(leave, id) {
            let leaveBlocks = $(".leave-" + id);
            let eyeMarker = $(leave).find(".eye");

            leaveBlocks.toggle();
            eyeMarker.toggle();
        }

        $("#denyBtn").on("click", function () {
            console.log("Yes");
            $("#denyName").text($("#name").text());
            $("#denyLeaveType").text($("#leaveType").text());
            $("#denyDate").text($("#date").text());
            $("#denyMessage").text($("#message").text());
            $("#denyID").val($(this).data("id"));

            // Show the modal
            $("#denyModal").modal("show");
        });

        function removeLeaveBg(p) {
            $(p).removeClass("bg-secondary bg-secondary-subtle text-secondary-emphasis");
        }

        function removeColorClass(e) {
            $(e).removeClass("bg-danger-subtle text-danger-emphasis bg-warning-subtle text-warning-emphasis bg-success-subtle text-success-emphasis bg-success text-white");
        }

        function assignTime(userId, date, time, isTimeIn) {
            $.ajax({
                url: '/Schedule/AssignTime',
                type: 'POST',
                data: {
                    userId: userId,
                    date: date,
                    time: time,
                    isTimeIn: isTimeIn
                },
                success: function (response) {
                    if (!response.success) {
                        alert('Error assigning time!');
                    }
                },
                error: function () {
                    alert('An error occurred while assigning the time in/out.');
                }
            });
        }
    </script>
}
