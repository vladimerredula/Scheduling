@using System.Globalization;
@model (List<User> Users, List<Shift> Shifts, List<Schedule> Schedules, List<Leave> Leaves, List<Holiday> Holidays, List<Sector> Sectors, int month, int year)
@{
    ViewData["Title"] = "Schedules";

    var leaves = ViewBag.LeaveTypes as List<Leave_type> ?? new List<Leave_type>();
}

<div class="px-3 px-sm-5">
    <h2>@ViewData["Title"]</h2>

    <div class="row mb-3 justify-content-between">
        <div class="col-auto">
            <div class="row">
                <div class="col-auto mb-2">
                    <label for="departmentId" class="form-label">Department</label>
                    <select name="departmentId" id="departmentId" class="form-select" asp-items="ViewBag.Departments">
                    </select>
                </div>
                <!-- Month Selection -->
                <div class="col-auto mb-2">
                    <label for="monthSelect" class="form-label">Month</label>
                    <input type="text" class="form-control" id="monthPicker">
                </div>
                <div class="col-auto mb-2 align-self-end">
                    <input type="text" id="searchBox" class="form-control" placeholder="Search Employee..." />
                </div>
            </div>
        </div>
        <div class="col-auto align-self-end">
            <a class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#leaveModal">Apply for leave</a>
            <a id="toggleLegendsBtn" class="btn btn-light border">Show legends</a>
        </div>
    </div>

    <div id="scheduleTable">
        <partial name="_ScheduleTable" />
    </div>
</div>

<!-- Leave Modal -->
<div class="modal fade" id="leaveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Assign leave</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Leave" asp-action="Apply">
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Leave type</label><span class="text-danger" title="Required">*</span>
                            <select name="Leave_type_ID" id="Leave_type_ID" class="form-select" data-val="true" data-val-required="The Leave type field is required." required>
                                <option value="" disabled selected>Choose..</option>
                                @foreach (var leave in leaves)
                                {
                                    <option value="@leave.Leave_type_ID">@leave.Leave_type_name</option>
                                }
                            </select>
                            <span class="text-danger field-validation-valid" data-valmsg-for="Leave_type_ID" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            <label class="form-label">Start</label><span class="text-danger" title="Required">*</span>
                            <input class="form-control" type="date" name="Date_start" id="Date_start" placeholder="mm/dd/yyyyy" data-val="true" data-val-required="The Date start field is required." required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Date_start" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col">
                            <label class="form-label">End</label><span class="text-danger" title="Required">*</span>
                            <input class="form-control" type="date" name="Date_end" id="Date_end" placeholder="mm/dd/yyyyy" data-val="true" data-val-required="The Date end field is required." required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Date_end" data-valmsg-replace="true"></span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer border-0">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Confirm</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Approve/deny leave Modal -->
<div class="modal fade" id="approveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Leave application</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    <dt class="col-sm-3 text-end">
                        Name
                    </dt>
                    <dd class="col-sm-9" id="name">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Leave type
                    </dt>
                    <dd class="col-sm-9" id="leaveType">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Date
                    </dt>
                    <dd class="col-sm-9" id="date">
                    </dd>
                </dl>
            </div>
            <div class="modal-footer border-0">
                <a class="btn btn-danger" id="denyBtn">Deny</a>
                <a class="btn btn-success" id="approveBtn">Approve</a>
            </div>
        </div>
    </div>
</div>

<!-- Reflect leave Modal -->
<div class="modal fade" id="reflectModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Leave application</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <dl class="row">
                    <dt class="col-sm-3 text-end">
                        Name
                    </dt>
                    <dd class="col-sm-9" id="name">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Leave type
                    </dt>
                    <dd class="col-sm-9" id="leaveType">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Date
                    </dt>
                    <dd class="col-sm-9" id="date">
                    </dd>
                    <dt class="col-sm-3 text-end">
                        Approved by
                    </dt>
                    <dd class="col-sm-9" id="approvedBy">
                    </dd>
                </dl>
            </div>
            <div class="modal-footer border-0">
                <a class="btn btn-danger">Mark as reflected</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // $.fn.bootstrapDP = $.fn.datepicker.noConflict();
        let cancelSort = false;
        let previousValue;

        $(document).ready(function (){
            initializePopovers();

            $('#monthPicker').datepicker({
                format: "MM yyyy",
                minViewMode: 1,
                maxViewMode: 2,
                autoclose: true
            }).datepicker('setDate', new Date(@Model.year,@(Model.month - 1))).on("changeDate", function (e) {
                let selectedDate = e.date;
                let month = selectedDate.getMonth() + 1; // getMonth() returns month from 0 to 11
                let year = selectedDate.getFullYear();
                loadSchedule(month, year);
            });

            $("#Date_start").on("click", function () {
                $(this)[0].showPicker();
            });

            $("#Date_start").on("change", function () {
                let startDateVal = new Date($(this).val());
                let endDate = $("#Date_end").val();

                if (endDate) {
                    let endDateVal = new Date(endDate);
                    if (endDateVal < startDateVal) {
                        $(this)
                            .closest("form")
                            .validate()
                            .showErrors({
                                "Date_start": "Start date cannot be later than the end date."
                            });
                        $(this).val("");
                    }
                } else {
                    $(this).blur();
                    $("#Date_end").focus();
                    $("#Date_end")[0].showPicker();
                }
            });

            $("#Date_end").on("click", function () {
                $(this)[0].showPicker();
            });

            $("#Date_end").on("change", function () {
                let endDateVal = new Date($(this).val());
                let startDate = $("#Date_start").val();

                if (startDate) {
                    let startDateVal = new Date(startDate);
                    if (endDateVal < startDateVal) {
                        $(this)
                            .closest("form")
                            .validate()
                            .showErrors({
                                "Date_end": "End date cannot be earlier than the start date."
                            });
                        $(this).val("");
                    }
                }
            });

            initializeToggleLegends();
            adjustTableColumns();
            $(window).on('resize', adjustTableColumns); // Optional: handle resizing
            filterTable();
        });

        // Search functionality
        $("#searchBox").on("input", function () {
            filterTable();
            });

        function initializePopovers() {
            $('[data-bs-toggle="tooltip"]').tooltip();
            $('[data-bs-toggle="popover"]').popover();
        }

        function filterTable() {
            let searchValue = $("#searchBox").val().toLowerCase();

            // Filter rows based on the search value
            $(".sector tr").filter(function () {
                let name = $(this).find("td:first").text().toLowerCase();
                $(this).toggle(name.includes(searchValue));
            });
        }

        function adjustTableColumns() {
            const table = $('#schedule');
            const columns = table.find('thead th');
            const totalColumns = columns.length;
            const firstColumnWidth = 230; // px
            const availableWidth = table.width() - firstColumnWidth;
            const otherColumnWidth = Math.floor(availableWidth / (totalColumns - 1));

            columns.each(function (index) {
                if (index === 0) {
                    $(this).css('width', firstColumnWidth + 'px');
                } else {
                    $(this).css('width', otherColumnWidth + 'px');
                }
            });
        }

        function initializeToggleLegends() {
            const toggleLegendsBtn = $("#toggleLegendsBtn");
            const legendsAndShifts = $("#legendsAndShifts");

            // Check localStorage for the saved state
            const savedState = localStorage.getItem("legendsAndShiftsVisible");

            if (savedState === "hidden") {
                legendsAndShifts.hide();
                toggleLegendsBtn.text("Show legends");
            } else {
                legendsAndShifts.show();
                toggleLegendsBtn.text("Hide legends");
            }

            // Toggle button click event
            toggleLegendsBtn.off("click").on("click", function () { // Use .off() to prevent duplicate event bindings
                legendsAndShifts.toggle(); // Toggle visibility

                if (legendsAndShifts.is(":visible")) {
                    toggleLegendsBtn.text("Hide legends");
                    localStorage.setItem("legendsAndShiftsVisible", "visible"); // Save state
                } else {
                    toggleLegendsBtn.text("Show legends");
                    localStorage.setItem("legendsAndShiftsVisible", "hidden"); // Save state
                }
            });
        }

        $(document).on('focus', 'select', function () {
            previousValue = $(this).val(); // Store the current value
        });

        $("#departmentId").on("change", function () {
            let date = $('#monthPicker').datepicker("getDate");
            loadSchedule(date.getMonth() + 1, date.getFullYear());
        });

        $(document).on("click", "#prevBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let prevMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);
                $datepicker.datepicker('setDate', prevMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        $(document).on("click", "#nextBtn", function () {
            let $datepicker = $('#monthPicker');
            let currentDate = $datepicker.datepicker('getDate');

            if (currentDate) {
                let nextMonthDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);
                $datepicker.datepicker('setDate', nextMonthDate);
                $datepicker.datepicker('update'); // Triggers changeDate event
            }
        });

        function showSpinner() {
            $("#loading-spinner").removeClass("d-none");
        }

        function hideSpinner() {
            $("#loading-spinner").addClass("d-none");
        }

        function loadSchedule(month, year) {
            let departmentId = $("#departmentId").val();

            showSpinner();
            $.ajax({
                url: '/Schedule/GetScheduleByMonth',
                type: 'GET',
                data: {
                    month: month,
                    year: year,
                    departmentId: departmentId
                },
                success: function (response) {
                    $("#scheduleTable").html(response);
                    hideSpinner();
                    initializeToggleLegends();
                    initializePopovers();
                },
                error: function () {
                    alert("Error loading schedule.");
                }
            });
        }
    </script>
}
